<?php
/**
 * @author Harry Tang <harry@powerkernel.com>
 * @link https://powerkernel.com
 * @copyright Copyright (c) 2016 Power Kernel
 */

namespace common\bootstrap;


use common\models\Setting;
use Yii;
use yii\base\Component;
use yii\base\Exception;
use yii\web\View;

/**
 * Class Configuration
 * @package common\components
 */
class Configuration extends Component
{
    public function init()
    {

        parent::init(); // TODO: Change the autogenerated stub
        /* do not run in setup controller */
        if (is_a(Yii::$app, '\yii\console\Application') && preg_match('/setup/', Yii::$app->request->params[0])) {
            return;
        }

        /* do not run if in migrate cmd */
        if (is_a(Yii::$app, '\yii\console\Application') && !empty(Yii::$app->request->params[0]) && preg_match('/migrate/', Yii::$app->request->params[0])) {
            return;
        }

        Yii::$app->name = Setting::getValue('title');

        $this->configTheme();

        $this->configApp();

        $this->configI18n();

        $this->configAuthClient();

        $this->configMailer();

        //$this->configDebugMode();

        $this->configUrlManager();

        $this->configReCaptcha();

        $this->configUserSettings();

        $this->configHsts();

        $this->configZopim();

    }

    /**
     * config app
     */
    protected function configApp()
    {
        $timezone = Setting::getValue('timezone');
        $language = Setting::getValue('language');
        if (!empty($timezone)) {
            Yii::$app->setTimeZone($timezone);
        }
        if (!empty($language)) {
            Yii::$app->language = $language;
        }
    }

    /**
     * Zopim
     */
    protected function configZopim()
    {
        if (Yii::$app->id == 'app-frontend') {
            if ($id = Setting::getValue('zopim')) {
                $js = <<<EOB
window.\$zopim||(function(d,s){var z=\$zopim=function(c){z._.push(c)},$=z.s=
d.createElement(s),e=d.getElementsByTagName(s)[0];z.set=function(o){z.set.
_.push(o)};z._=[];z.set._=[];$.async=!0;$.setAttribute("charset","utf-8");
$.src="//v2.zopim.com/?{$id}";z.t=+new Date;$.
type="text/javascript";e.parentNode.insertBefore($,e)})(document,"script");
EOB;
                Yii::$app->view->registerJs($js, View::POS_END, 'zopim');
            }
        }
    }


    /**
     * Enable HSTS
     */
    protected function configHsts()
    {
        if (!is_a(Yii::$app, 'yii\console\Application')) {
            if (Yii::$app->request->isSecureConnection) {
                $response = Yii::$app->response;
                $response->headers->set('Strict-Transport-Security', 'max-age=15552000');
                $response->headers->set('x-content-type-options', 'nosniff');
            }
        }
    }

    /**
     * user settings
     */
    protected function configUserSettings()
    {
        /* language / timezone */
        if (is_a(Yii::$app, '\yii\web\Application')) {
            if (!Yii::$app->user->isGuest) {
                try {
                    $user = Yii::$app->user->identity;
                    /* if user local not exist, set default */
                    $locales = \common\models\Message::getLocaleList();
                    if (!in_array($user->language, array_keys($locales))) {
                        $user->language = Setting::getValue('language');
                        $user->save();
                    }
                    Yii::$app->language = $user->language;
                    Yii::$app->setTimeZone($user->timezone);
                } catch (Exception $e) {
                    Yii::$app->cache->flush();
                    Yii::$app->user->logout();
                }
            }
        }
    }


    /**
     * ReCaptcha
     */
    protected
    function configReCaptcha()
    {
        // recaptcha
        $rcKey = Setting::getValue('reCaptchaKey');
        $rcSecret = Setting::getValue('reCaptchaSecret');
        if (!empty($rcKey) && !empty($rcSecret)) {
            Yii::$container->set('himiklab\yii2\recaptcha\ReCaptcha', [
                'siteKey' => $rcKey,
                'secret' => $rcSecret,
            ]);
        }
    }


    /**
     * Auth clients
     */
    protected
    function configAuthClient()
    {

        $clients = [];

        // client facebook
        $fbAppId = Setting::getValue('facebookAppId');
        $fbAppSecret = Setting::getValue('facebookAppSecret');
        if (!empty($fbAppId) && !empty($fbAppSecret)) {
            $clients['facebook'] = [
                'class' => 'yii\authclient\clients\Facebook',
                'clientId' => $fbAppId,
                'clientSecret' => $fbAppSecret,
            ];
        }

        // client google
        $gClientId = Setting::getValue('googleClientId');
        $gClientSecret = Setting::getValue('googleClientSecret');
        if (!empty($gClientId) && !empty($gClientSecret)) {
            $clients['google'] = [
                'class' => 'yii\authclient\clients\Google',
                'clientId' => $gClientId,
                'clientSecret' => $gClientSecret,
            ];
        }

        // flickr-photo
        $flickrClientKey = Setting::getValue('flickrClientKey');
        $flickrClientSecret = Setting::getValue('flickrClientSecret');
        if (!empty($flickrClientKey) && !empty($flickrClientSecret)) {
            $clients['flickr-photo'] = [
                'class' => 'common\components\FlickrPhoto',
                //'perms' => 'write',
                'consumerKey' => $flickrClientKey,
                'consumerSecret' => $flickrClientSecret,
            ];
        }

        // clients OK
        if (!empty($clients)) {
            Yii::$container->set('yii\authclient\Collection', [
                'class' => 'yii\authclient\Collection',
                'clients' => $clients,
            ]);
        }
    }


    /**
     * mailer
     */
    protected
    function configMailer()
    {
        $mailProtocol = Setting::getValue('mailProtocol');
        if ($mailProtocol == 'smtp') {
            $host = Setting::getValue('smtpHost');
            $user = Setting::getValue('smtpUsername');
            $pass = Setting::getValue('smtpPassword');
            $port = Setting::getValue('smtpPort');
            $encryption = Setting::getValue('smtpEncryption');
            Yii::$container->set('yii\swiftmailer\Mailer', [
                'viewPath' => '@common/mail',
                'useFileTransport' => false,
                'transport' => [
                    'class' => 'Swift_SmtpTransport',
                    'host' => $host,
                    'username' => $user,
                    'password' => $pass,
                    'port' => $port,
                    'encryption' => $encryption,
                ],
            ]);
        }
    }


    /**
     * UrlManager
     */
    protected
    function configUrlManager()
    {

        /* default */
        $urlManager = [
            'ignoreLanguageUrlPatterns' => [
                '#^account/auth#' => '#^account/auth#',
                '#^site/logout#' => '#^site/logout#',
                '#^site/robots#' => '#^robots.txt#',
                '#^site/sitemap#' => '#^sitemap\.xml#',
                '#^site/manifest#' => '#^manifest\.json#',
                '#^site/browser-config#' => '#^browserconfig\.xml#',
                '#^blog/sitemap#' => '#^blog/sitemap\d+\.xml#',
            ],
            'rules' => [
                '' => 'site/index',
                'sitemap.xml' => 'site/sitemap',
                'robots.txt' => 'site/robots',
                'manifest.json' => 'site/manifest',
                'browserconfig.xml' => 'site/browser-config',
                '<id:.+?>.html' => 'site/page',

                /* blog */
                'blog/<action:(manage|create|update|delete)>' => 'blog/<action>',
                'blog/sitemap<page:\d+>.xml' => 'blog/sitemap',
                'blog' => 'blog/index',
                'blog/<name:.+?>.amp' => 'blog/view-amp',
                'blog/<name:.+?>' => 'blog/view',

                /* page */
                'page/sitemap<page:\d+>.xml' => 'page/sitemap',
            ],
        ];

        /* modules */
        $dirs = ['harrytang', 'powerkernel'];

        foreach ($dirs as $dir) {
            if (file_exists(__DIR__ . '/../../vendor/' . $dir)) {
                $modules = scandir(__DIR__ . '/../../vendor/' . $dir);
                foreach ($modules as $module) {
                    if (!preg_match('/[\.]+/', $module)) // not parent dir
                    {
                        $urlManagerFile = __DIR__ . '/../../vendor/' . $dir . '/' . $module . '/urlManager.php';
                        if (file_exists($urlManagerFile)) {

                            $urlManagerConfig = require($urlManagerFile);


                            if (!empty($urlManagerConfig['ignoreLanguageUrlPatterns'])) {
                                $urlManager['ignoreLanguageUrlPatterns'] = array_merge(
                                    $urlManager['ignoreLanguageUrlPatterns'],
                                    $urlManagerConfig['ignoreLanguageUrlPatterns']
                                );
                            }

                            if (!empty($urlManagerConfig['rules'])) {
                                $urlManager['rules'] = array_merge(
                                    $urlManager['rules'],
                                    $urlManagerConfig['rules']
                                );
                            }


                        }
                    }
                }
            }
        }


        /* database value lang url */
        $enableDefaultLanguageUrlCode = (boolean)Setting::getValue('languageUrlCode');
        /* disable if we are in backend */
        if (Yii::$app->id == 'app-backend') {
            $enableDefaultLanguageUrlCode = false;
        }

        Yii::$container->set('yii\web\UrlManager', [
            /* config */
            'rules' => $urlManager['rules']
        ]);

        Yii::$container->set('common\components\LocaleUrl', [
            /* config */
            'languages' => array_keys(\common\models\Message::getLocaleList()),
            'languageParam' => 'lang',
            'enableLanguagePersistence' => false, // default true
            'enableDefaultLanguageUrlCode' => $enableDefaultLanguageUrlCode,
            'enableLanguageDetection' => false, // default true
            'ignoreLanguageUrlPatterns' => $urlManager['ignoreLanguageUrlPatterns'],
            'rules' => $urlManager['rules']
        ]);


    }

    /**
     * config i18n
     */
    protected function configI18n()
    {
        $class = 'common\components\MongoDbMessageSource';

        Yii::$container->set('yii\i18n\I18N', [
            'translations' => [
                'app*' => [
                    'class' => $class,
                    'on missingTranslation' => function ($event) {
                        $event->sender->handleMissingTranslation($event);
                    },
                ],
                'main' => [
                    'class' => $class,
                    'on missingTranslation' => function ($event) {
                        $event->sender->handleMissingTranslation($event);
                    },
                ],
            ],
        ]);


    }

    /**
     * config theme
     */
    protected function configTheme()
    {
        if (is_a(Yii::$app, '\yii\console\Application')) {
            return;
        }
        $session = Yii::$app->session;
        $requestCookies = Yii::$app->request->cookies;
        /* get saved theme */
        $name = $session->get('theme');
        if (!$name) {
            $cookie = $requestCookies->get('theme');
            if ($cookie) {
                $name = $cookie->value;
            }
        }
        /* is changing theme ?*/
        $setTheme = Yii::$app->request->get('set-theme');
        if (!empty($setTheme)) {
            $name = $setTheme;
        }
        /* check */
        if (in_array($name, array_keys(Yii::$app->params['themes']))) {
            $class = Yii::$app->params['themes'][$name];

            /* set theme */
            /* cookie and session */
            $session->set('theme', $name);
            $responseCookies = Yii::$app->response->cookies;
            $responseCookies->add(new \yii\web\Cookie([
                'name' => 'theme',
                'value' => $name,
                'expire' => time() + (10 * 365 * 24 * 60 * 60)
            ]));

            /* change theme*/
            if (class_exists($class) && get_class(Yii::$app->view->theme)!=$class) {
                $theme = new $class;
                Yii::$app->view->theme = $theme;
            }

        }
    }
}
